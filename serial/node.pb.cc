// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace serial {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Boundary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Boundary_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMeta_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_node_2eproto() {
  protobuf_AddDesc_node_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "node.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  LineList_descriptor_ = file->message_type(1);
  static const int LineList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineList, points_),
  };
  LineList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineList_descriptor_,
      LineList::default_instance_,
      LineList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineList));
  Boundary_descriptor_ = file->message_type(2);
  static const int Boundary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boundary, line_list_),
  };
  Boundary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Boundary_descriptor_,
      Boundary::default_instance_,
      Boundary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boundary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Boundary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Boundary));
  ExitLine_descriptor_ = file->message_type(3);
  static const int ExitLine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitLine, e1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitLine, e2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitLine, exit_id_),
  };
  ExitLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitLine_descriptor_,
      ExitLine::default_instance_,
      ExitLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitLine));
  NodeMeta_descriptor_ = file->message_type(4);
  static const int NodeMeta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, boundaries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, exit_lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, image_loc_),
  };
  NodeMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMeta_descriptor_,
      NodeMeta::default_instance_,
      NodeMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMeta));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_node_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineList_descriptor_, &LineList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Boundary_descriptor_, &Boundary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitLine_descriptor_, &ExitLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMeta_descriptor_, &NodeMeta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_node_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete LineList::default_instance_;
  delete LineList_reflection_;
  delete Boundary::default_instance_;
  delete Boundary_reflection_;
  delete ExitLine::default_instance_;
  delete ExitLine_reflection_;
  delete NodeMeta::default_instance_;
  delete NodeMeta_reflection_;
}

void protobuf_AddDesc_node_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nnode.proto\022\006serial\"\035\n\005Point\022\t\n\001x\030\001 \002(\002"
    "\022\t\n\001y\030\002 \002(\002\")\n\010LineList\022\035\n\006points\030\001 \003(\0132"
    "\r.serial.Point\"/\n\010Boundary\022#\n\tline_list\030"
    "\001 \003(\0132\020.serial.LineList\"Q\n\010ExitLine\022\031\n\002e"
    "1\030\001 \002(\0132\r.serial.Point\022\031\n\002e2\030\002 \002(\0132\r.ser"
    "ial.Point\022\017\n\007exit_id\030\003 \001(\r\"i\n\010NodeMeta\022$"
    "\n\nboundaries\030\001 \001(\0132\020.serial.Boundary\022$\n\n"
    "exit_lines\030\002 \003(\0132\020.serial.ExitLine\022\021\n\tim"
    "age_loc\030\003 \001(\t", 333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "node.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  LineList::default_instance_ = new LineList();
  Boundary::default_instance_ = new Boundary();
  ExitLine::default_instance_ = new ExitLine();
  NodeMeta::default_instance_ = new NodeMeta();
  Point::default_instance_->InitAsDefaultInstance();
  LineList::default_instance_->InitAsDefaultInstance();
  Boundary::default_instance_->InitAsDefaultInstance();
  ExitLine::default_instance_->InitAsDefaultInstance();
  NodeMeta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_node_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_node_2eproto {
  StaticDescriptorInitializer_node_2eproto() {
    protobuf_AddDesc_node_2eproto();
  }
} static_descriptor_initializer_node_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineList::kPointsFieldNumber;
#endif  // !_MSC_VER

LineList::LineList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineList::InitAsDefaultInstance() {
}

LineList::LineList(const LineList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineList::~LineList() {
  SharedDtor();
}

void LineList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineList_descriptor_;
}

const LineList& LineList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

LineList* LineList::default_instance_ = NULL;

LineList* LineList::New() const {
  return new LineList;
}

void LineList::Clear() {
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .serial.Point points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .serial.Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .serial.Point points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineList::ByteSize() const {
  int total_size = 0;

  // repeated .serial.Point points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineList::MergeFrom(const LineList& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineList::CopyFrom(const LineList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineList::IsInitialized() const {

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void LineList::Swap(LineList* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineList_descriptor_;
  metadata.reflection = LineList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Boundary::kLineListFieldNumber;
#endif  // !_MSC_VER

Boundary::Boundary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Boundary::InitAsDefaultInstance() {
}

Boundary::Boundary(const Boundary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Boundary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Boundary::~Boundary() {
  SharedDtor();
}

void Boundary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Boundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Boundary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Boundary_descriptor_;
}

const Boundary& Boundary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

Boundary* Boundary::default_instance_ = NULL;

Boundary* Boundary::New() const {
  return new Boundary;
}

void Boundary::Clear() {
  line_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Boundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .serial.LineList line_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_line_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_line_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_line_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Boundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .serial.LineList line_list = 1;
  for (int i = 0; i < this->line_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->line_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Boundary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .serial.LineList line_list = 1;
  for (int i = 0; i < this->line_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->line_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Boundary::ByteSize() const {
  int total_size = 0;

  // repeated .serial.LineList line_list = 1;
  total_size += 1 * this->line_list_size();
  for (int i = 0; i < this->line_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->line_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Boundary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Boundary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Boundary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Boundary::MergeFrom(const Boundary& from) {
  GOOGLE_CHECK_NE(&from, this);
  line_list_.MergeFrom(from.line_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Boundary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Boundary::CopyFrom(const Boundary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Boundary::IsInitialized() const {

  for (int i = 0; i < line_list_size(); i++) {
    if (!this->line_list(i).IsInitialized()) return false;
  }
  return true;
}

void Boundary::Swap(Boundary* other) {
  if (other != this) {
    line_list_.Swap(&other->line_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Boundary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Boundary_descriptor_;
  metadata.reflection = Boundary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitLine::kE1FieldNumber;
const int ExitLine::kE2FieldNumber;
const int ExitLine::kExitIdFieldNumber;
#endif  // !_MSC_VER

ExitLine::ExitLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitLine::InitAsDefaultInstance() {
  e1_ = const_cast< ::serial::Point*>(&::serial::Point::default_instance());
  e2_ = const_cast< ::serial::Point*>(&::serial::Point::default_instance());
}

ExitLine::ExitLine(const ExitLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitLine::SharedCtor() {
  _cached_size_ = 0;
  e1_ = NULL;
  e2_ = NULL;
  exit_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitLine::~ExitLine() {
  SharedDtor();
}

void ExitLine::SharedDtor() {
  if (this != default_instance_) {
    delete e1_;
    delete e2_;
  }
}

void ExitLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitLine_descriptor_;
}

const ExitLine& ExitLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

ExitLine* ExitLine::default_instance_ = NULL;

ExitLine* ExitLine::New() const {
  return new ExitLine;
}

void ExitLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_e1()) {
      if (e1_ != NULL) e1_->::serial::Point::Clear();
    }
    if (has_e2()) {
      if (e2_ != NULL) e2_->::serial::Point::Clear();
    }
    exit_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .serial.Point e1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_e2;
        break;
      }

      // required .serial.Point e2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_e2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exit_id;
        break;
      }

      // optional uint32 exit_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exit_id_)));
          set_has_exit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExitLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .serial.Point e1 = 1;
  if (has_e1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e1(), output);
  }

  // required .serial.Point e2 = 2;
  if (has_e2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->e2(), output);
  }

  // optional uint32 exit_id = 3;
  if (has_exit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exit_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .serial.Point e1 = 1;
  if (has_e1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e1(), target);
  }

  // required .serial.Point e2 = 2;
  if (has_e2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->e2(), target);
  }

  // optional uint32 exit_id = 3;
  if (has_exit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exit_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .serial.Point e1 = 1;
    if (has_e1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->e1());
    }

    // required .serial.Point e2 = 2;
    if (has_e2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->e2());
    }

    // optional uint32 exit_id = 3;
    if (has_exit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exit_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitLine::MergeFrom(const ExitLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e1()) {
      mutable_e1()->::serial::Point::MergeFrom(from.e1());
    }
    if (from.has_e2()) {
      mutable_e2()->::serial::Point::MergeFrom(from.e2());
    }
    if (from.has_exit_id()) {
      set_exit_id(from.exit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitLine::CopyFrom(const ExitLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_e1()) {
    if (!this->e1().IsInitialized()) return false;
  }
  if (has_e2()) {
    if (!this->e2().IsInitialized()) return false;
  }
  return true;
}

void ExitLine::Swap(ExitLine* other) {
  if (other != this) {
    std::swap(e1_, other->e1_);
    std::swap(e2_, other->e2_);
    std::swap(exit_id_, other->exit_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitLine_descriptor_;
  metadata.reflection = ExitLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeMeta::kBoundariesFieldNumber;
const int NodeMeta::kExitLinesFieldNumber;
const int NodeMeta::kImageLocFieldNumber;
#endif  // !_MSC_VER

NodeMeta::NodeMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeMeta::InitAsDefaultInstance() {
  boundaries_ = const_cast< ::serial::Boundary*>(&::serial::Boundary::default_instance());
}

NodeMeta::NodeMeta(const NodeMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeMeta::SharedCtor() {
  _cached_size_ = 0;
  boundaries_ = NULL;
  image_loc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMeta::~NodeMeta() {
  SharedDtor();
}

void NodeMeta::SharedDtor() {
  if (image_loc_ != &::google::protobuf::internal::kEmptyString) {
    delete image_loc_;
  }
  if (this != default_instance_) {
    delete boundaries_;
  }
}

void NodeMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMeta_descriptor_;
}

const NodeMeta& NodeMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_node_2eproto();
  return *default_instance_;
}

NodeMeta* NodeMeta::default_instance_ = NULL;

NodeMeta* NodeMeta::New() const {
  return new NodeMeta;
}

void NodeMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_boundaries()) {
      if (boundaries_ != NULL) boundaries_->::serial::Boundary::Clear();
    }
    if (has_image_loc()) {
      if (image_loc_ != &::google::protobuf::internal::kEmptyString) {
        image_loc_->clear();
      }
    }
  }
  exit_lines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .serial.Boundary boundaries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundaries()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exit_lines;
        break;
      }

      // repeated .serial.ExitLine exit_lines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exit_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exit_lines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exit_lines;
        if (input->ExpectTag(26)) goto parse_image_loc;
        break;
      }

      // optional string image_loc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_loc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_loc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->image_loc().data(), this->image_loc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .serial.Boundary boundaries = 1;
  if (has_boundaries()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boundaries(), output);
  }

  // repeated .serial.ExitLine exit_lines = 2;
  for (int i = 0; i < this->exit_lines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->exit_lines(i), output);
  }

  // optional string image_loc = 3;
  if (has_image_loc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_loc().data(), this->image_loc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->image_loc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .serial.Boundary boundaries = 1;
  if (has_boundaries()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boundaries(), target);
  }

  // repeated .serial.ExitLine exit_lines = 2;
  for (int i = 0; i < this->exit_lines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->exit_lines(i), target);
  }

  // optional string image_loc = 3;
  if (has_image_loc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->image_loc().data(), this->image_loc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image_loc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .serial.Boundary boundaries = 1;
    if (has_boundaries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundaries());
    }

    // optional string image_loc = 3;
    if (has_image_loc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_loc());
    }

  }
  // repeated .serial.ExitLine exit_lines = 2;
  total_size += 1 * this->exit_lines_size();
  for (int i = 0; i < this->exit_lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exit_lines(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMeta::MergeFrom(const NodeMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  exit_lines_.MergeFrom(from.exit_lines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boundaries()) {
      mutable_boundaries()->::serial::Boundary::MergeFrom(from.boundaries());
    }
    if (from.has_image_loc()) {
      set_image_loc(from.image_loc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMeta::CopyFrom(const NodeMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMeta::IsInitialized() const {

  if (has_boundaries()) {
    if (!this->boundaries().IsInitialized()) return false;
  }
  for (int i = 0; i < exit_lines_size(); i++) {
    if (!this->exit_lines(i).IsInitialized()) return false;
  }
  return true;
}

void NodeMeta::Swap(NodeMeta* other) {
  if (other != this) {
    std::swap(boundaries_, other->boundaries_);
    exit_lines_.Swap(&other->exit_lines_);
    std::swap(image_loc_, other->image_loc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMeta_descriptor_;
  metadata.reflection = NodeMeta_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serial

// @@protoc_insertion_point(global_scope)
